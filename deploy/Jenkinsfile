pipeline {
    agent any
    parameters {
          string(name: 'inventory', defaultValue: 'dev',  description: 'This is the inventory file for the environment to deploy configuration')
          string(name: 'ansible_tags', defaultValue: 'webserver', description: 'Ansible tags to limit execution')
        }
    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }

    stages {
        stage("Initial cleanup") {
            steps {
                dir("${WORKSPACE}") {
                    deleteDir()
                }
            }
        }

        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/AyopoB/ansible-config-mgt.git'
            }
        }

        stage('Prepare Ansible For Execution') {
            steps {
                sh """
                echo ${WORKSPACE}
                if grep -q '^roles_path=' ${WORKSPACE}/deploy/ansible.cfg; then
                    sed -i "s|^roles_path=.*|roles_path=${WORKSPACE}/roles|" ${WORKSPACE}/deploy/ansible.cfg
                else
                    echo "roles_path=${WORKSPACE}/roles" >> ${WORKSPACE}/deploy/ansible.cfg
                fi
                """
            }
        }


       

        stage('Run Ansible playbook') {
            steps {
                sshagent(['ssh-ansible']) {
                    ansiblePlaybook(
                        become: true,
                        credentialsId: 'ssh-ansible',
                        disableHostKeyChecking: true,
                        installation: 'ansible',
                        inventory: "${WORKSPACE}/inventory/${inventory}.yml",
                        playbook: "${WORKSPACE}/playbooks/site.yml",
                        tags: "${params.ansible_tags}"
                    )
                }
            }
        }

        stage('Clean Workspace after build') {
            steps {
                cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
            }
        }
    }
}

